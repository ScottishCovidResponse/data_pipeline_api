
# Makefile for building the C++ bindings for the Python data pipeline client

# Use
#   make V=1
# to see the commands used.

###############################################################################
# Customisations
###############################################################################

PYTHON           := python3
PYTHON_CONFIG    := $(PYTHON)-config
AR               := ar
MKDIR_P          := mkdir -p

###############################################################################
# Python-related flags
###############################################################################

PYBIND11_INCLUDE := -I$(shell $(PYTHON) -c 'import os; import pybind11; print(os.path.dirname(pybind11.__file__)+"/include")')
PYTHON_CONFIG_FLAGS := $(shell $(PYTHON) -c 'import sys; print("" if (sys.version_info.major < 3 or sys.version_info.minor < 8) else "--embed")')
PYTHON_CFLAGS := $(PYTHON_EXTRA_CFLAGS) $(PYBIND11_INCLUDE) $(shell $(PYTHON_CONFIG) $(PYTHON_CONFIG_FLAGS) --cflags) -UNDEBUG -fPIC
PYTHON_LDFLAGS := $(PYTHON_EXTRA_LDFLAGS) $(shell $(PYTHON_CONFIG) $(PYTHON_CONFIG_FLAGS) --ldflags)

###############################################################################
# Directories
###############################################################################

BUILD_DIR := ./build
SRC_DIR := .
INC_DIRS := $(SRC_DIR) $(BUILD_DIR)

###############################################################################
# 
###############################################################################

# Library
TARGET_LIB := $(BUILD_DIR)/libdatapipeline.a
LIB_SRC_NAMES := array.cc datapipeline.cc table.cc
LIB_SRCS := $(addprefix $(SRC_DIR)/,$(LIB_SRC_NAMES))
LIB_OBJS := $(LIB_SRCS:%=$(BUILD_DIR)/%.o)

# Executables
TARGET_EXEC_NAMES := test_datapipeline
TARGET_EXECS := $(addprefix $(BUILD_DIR)/,$(TARGET_EXEC_NAMES))
EXEC_SRCS := $(foreach name,$(TARGET_EXEC_NAMES),$(SRC_DIR)/$(name).cc)
EXEC_OBJS := $(EXEC_SRCS:%=$(BUILD_DIR)/%.o)

# Test executable
TEST_EXEC_NAME := test_cpp_datapipeline
TEST_EXEC := $(BUILD_DIR)/$(TEST_EXEC_NAME)
TEST_EXEC_SRCS := $(SRC_DIR)/$(TEST_EXEC_NAME).cc $(LIB_SRCS) $(SRC_DIR)/tests.cc
TEST_EXEC_OBJS := $(TEST_EXEC_SRCS:%=$(BUILD_DIR)/%.o)

# All
OBJS := $(LIB_OBJS) $(EXEC_OBJS)
DEPS := $(OBJS:.o=.d)

# Tests
TESTS := $(foreach name,$(TARGET_EXEC_NAMES),TEST_$(name))

###############################################################################
# Flags
###############################################################################

CXXFLAGS := $(CXXFLAGS) -g -std=c++11 -Wno-attributes $(PYTHON_CFLAGS) -Wall
INC_FLAGS := $(addprefix -I,$(INC_DIRS))
CPPFLAGS := $(CPPFLAGS) $(INC_FLAGS) -MMD -MP
LDFLAGS := $(LDFLAGS) $(PYTHON_LDFLAGS)

###############################################################################
# Rules
###############################################################################

.PHONY : all

all: $(TARGET_EXECS) $(TEST_EXEC)

# Link the executable from its corresponding object file and the library
$(TARGET_EXECS): $(BUILD_DIR)/% : $(BUILD_DIR)/%.cc.o $(TARGET_LIB)
	$(MKDIR_P) $(dir $@)
	@echo "LINK $@"
	$(CXX) $^ -o $@ $(LDFLAGS)

# Link the test executable from its corresponding object files
$(TEST_EXEC): $(BUILD_DIR)/% : $(TEST_EXEC_OBJS)
	$(MKDIR_P) $(dir $@)
	@echo "LINK $@"
	$(CXX) $^ -o $@ $(LDFLAGS)

# Build the library from all the library object files
$(TARGET_LIB): $(LIB_OBJS)
	$(MKDIR_P) $(dir $@)
	@echo "AR $@"
	$(AR) -crs $@ $(LIB_OBJS)

# Compile .cc files into .cc.o files
$(BUILD_DIR)/%.cc.o: %.cc  | gitversion
	$(MKDIR_P) $(dir $@)
	@echo "CXX $@"
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

# Run all the tests
.PHONY : test
test: $(TEST_EXEC)
	$(TEST_EXEC)

# Run each executable as a test
.PHONY : $(TESTS)
$(TESTS): TEST_% : $(BUILD_DIR)/%
	@echo "TEST $<"
	$^ ../../tests/data/config.yaml

# Remove the build directory
.PHONY: clean
clean:
	$(RM) -r $(BUILD_DIR)

.PHONY : gitversion
gitversion:
	@$(MKDIR_P) $(BUILD_DIR)
	bash ./gitversion.sh $(BUILD_DIR)/gitversion.hh

requirements.txt: ../../environment.yml
	rm -f requirements.txt
	echo "pybind11==2.5.0" >>requirements.txt
	echo "wheel==0.34.2" >>requirements.txt
	python -c 'import yaml; [print(s.replace("=","==")) for s in yaml.safe_load(open("../../environment.yml","r"))["dependencies"] if not s.startswith("python=")]' >>requirements.txt

# Include dependency files generated by the compiler (CPPFLAGS -MMD -MP)
-include $(DEPS)

# Disable all built-in rules
.SUFFIXES:

# Control verbosity
# See http://make.mad-scientist.net/managing-recipe-echoing/
$(V).SILENT:
